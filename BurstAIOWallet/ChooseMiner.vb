Imports Newtonsoft.Json

Imports Newtonsoft.Json.Linq
Imports System.IO
Imports CefSharp
Imports CefSharp.WinForms
Imports System.Net
Imports System.Text

Public Class ChooseMiner

    Private WithEvents browser As ChromiumWebBrowser

    Dim xmlDataSet As System.Data.DataSet
    Public Sub loaditems()
        Try
            Dim path As String
            path = System.IO.Path.GetDirectoryName( _
               System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase).Replace("file:\", "")
            xmlDataSet = New System.Data.DataSet("XML DataSet")
            ' Load the XML document to the DataSet
            xmlDataSet.ReadXml("Pools.xml")
            ' This line of code is generated by Data Source Configuration Wizard

            LookUpEdit1.Properties.DataSource = xmlDataSet.Tables("pool")

            LookUpEdit1.Properties.DisplayMember = "address"
            LookUpEdit1.Properties.ValueMember = "address"
            '  Dim fileReader As System.IO.StreamReader
            '  fileReader = My.Computer.FileSystem.OpenTextFileReader(path + "\miner-burst-1.160705\chosen_pool.txt")
            '  Dim stringReader As String
            ' stringReader = fileReader.ReadLine()
            '  LookUpEdit1.DataBindings.Add(LookUpEdit1.Text, xmlDataSet.Tables("pools"), "address")
            '  LookUpEdit1.DataBindings.Add(LookUpEdit1.EditValue, xmlDataSet.Tables("pools"), "port")
            ' LookUpEdit1.Text = stringReader
            walletaddress = callAPI.getFastestWallet()
        Catch ex As Exception
            MsgBox(ex)
        Finally


        End Try
    End Sub
    <System.Runtime.InteropServices.DllImport("kernel32.dll")> _
    Private Shared Function GetEnabledXStateFeatures() As Long
    End Function
    Public Shared Function HasAvxSupport() As Boolean
        Try
            Return (GetEnabledXStateFeatures() And 4) <> 0
        Catch
            Return False
        End Try
    End Function

    Dim walletaddress As String
    Private Sub ChooseMiner_Load(sender As Object, e As EventArgs) Handles MyBase.Load

        loaditems()
        Try
            '            CefSharp.Cef.EnableHighDPISupport()
            '            Dim settings As New CefSettings()
            '            If (CefSharp.Cef.IsInitialized) Then

            '            Else
            '                CefSharp.Cef.Initialize(New CefSettings() With { _
            '                 .CachePath = "Cache" _
            '            })
            '            End If
            '            
            '            browser = New ChromiumWebBrowser(address.Replace("/burst?requestType=getMiningInfo", "/rewardassignmentshort.html")) With {
            ' .Dock = DockStyle.Fill
            '}
            '            PnlRewardrecip.Controls.Add(browser)
        Catch ex As Exception

        End Try
        DevExpress.XtraSplashScreen.SplashScreenManager.CloseForm()
    End Sub
    Dim Recipient As Object

    Public Sub ChangeMinerConfig()
        Try

            Dim path As String

            path = System.IO.Path.GetDirectoryName( _
               System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase).Replace("file:\", "")
            Dim FILE_NAME As String = path + "\miner-burst-1.160705\miner.conf"

            Dim fileReader As System.IO.StreamReader
            fileReader = My.Computer.FileSystem.OpenTextFileReader(path + "\miner-burst-1.160705\miner.conf")
            Dim json As JObject

            Dim rawresp As String
            rawresp = fileReader.ReadToEnd()
            'Dim filewriter As System.IO.StreamWriter
            ''  filewriter = My.Computer.FileSystem.OpenTextFileWriter("\miner-burst-1.160705\miner.conf")
            json = JObject.Parse(rawresp)

            Dim editor As DevExpress.XtraEditors.LookUpEdit = CType(LookUpEdit1, DevExpress.XtraEditors.LookUpEdit)
            Dim row As DataRowView = CType(editor.Properties.GetDataSourceRowByKeyValue(editor.EditValue), DataRowView)
            Dim port As Object = row("port")
            Dim address As Object = row("address")

            Recipient = row("reward")
            TxtRecipient.Text = Recipient
            Dim rss As JObject = JObject.Parse(rawresp)
            Dim channel As JArray = DirectCast(rss("Paths"), JArray)

            rss("Server") = DirectCast(address, String)
            rss("Port") = DirectCast(port, String)

            rss("UpdaterAddr") = DirectCast(address, String)
            rss("UpdaterPort") = DirectCast(port, String)

            rss("InfoAddr") = DirectCast(address, String)
            rss("InfoPort") = DirectCast(port, String)
            Dim allDrives() As DriveInfo = DriveInfo.GetDrives()
            Dim item As JArray = DirectCast(channel, JArray)
            item.RemoveAll()
            Dim d As DriveInfo
            For Each d In allDrives
                Console.WriteLine("Drive {0}", d.Name)
                Console.WriteLine("  Drive type: {0}", d.DriveType)
                If d.IsReady = True Then
                    If Directory.Exists(d.Name + "\Burst\Plots") Then
                        'MsgBox("dir Exists " + d.Name + "\Burst\Plots")
                        item.Add(d.Name + ("Burst\Plots"))
                    End If

                End If
            Next



            fileReader.Close()


            If System.IO.File.Exists(FILE_NAME) = True Then

                System.IO.File.WriteAllText(FILE_NAME, rss.ToString())

                '    MessageBox.Show("Text written to file")

            Else

                '   MessageBox.Show("File Does Not Exist")

            End If

        Catch ex As Exception
            'MsgBox(ex)
        End Try
    End Sub
    Private Sub LookUpEdit1_EditValueChanged(sender As Object, e As EventArgs) Handles LookUpEdit1.EditValueChanged

    End Sub

    Private Sub LookUpEdit1_Leave(sender As Object, e As EventArgs) Handles LookUpEdit1.Leave
        ChangeMinerConfig()
    End Sub
    Private Sub StartMiner(Miner As String)
        Dim path As String
        path = System.IO.Path.GetDirectoryName( _
           System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase).Replace("file:\", "")
        Dim FILE_NAME As String = path + "\miner-burst-1.160705"
        Dim PSI As New System.Diagnostics.ProcessStartInfo()
        PSI.FileName = Miner
        PSI.WorkingDirectory = FILE_NAME
        System.Diagnostics.Process.Start(PSI)
    End Sub
    Private Sub btnBlagoMiner_Click(sender As Object, e As EventArgs) Handles btnBlagoMiner.Click
        StartMiner("miner-v1.160705.exe")
    End Sub
    Private Sub btnBlagoMinerAVX_Click(sender As Object, e As EventArgs) Handles btnBlagoMinerAVX.Click
        StartMiner("miner-v1.160705_AVX.exe")
    End Sub
    Private Sub btnBlagoMinerAVXAMD_Click(sender As Object, e As EventArgs) Handles btnBlagoMinerAVXAMD.Click
        StartMiner("miner-v1.160705_AVX_amd.exe")
    End Sub
    Private Sub btnBlagoMinerAVXI64_Click(sender As Object, e As EventArgs) Handles btnBlagoMinerAVXI64.Click
        StartMiner("miner-v1.160705_AVX_i64.exe")
    End Sub

    Private Sub BtnMine_Click(sender As Object, e As EventArgs) Handles BtnMine.Click
        If HasAvxSupport() = True Then
            StartMiner("miner-v1.160705_AVX.exe")
        Else
            StartMiner("miner-v1.160705.exe")
        End If
    End Sub

    Private Sub BtnToClipboard_Click_1(sender As Object, e As EventArgs) Handles BtnToClipboard.Click
        Clipboard.SetText(Recipient.ToString())
    End Sub

    Private Sub SimpleButton1_Click_1(sender As Object, e As EventArgs) Handles btnSubmit.Click

        MsgBox(JObject.Parse(callAPI.setRewardRecipient(walletaddress.Replace("/burst?requestType=getMiningInfo", "/"), txtPassPhrase.Text, TxtRecipient.Text, EdtFee.EditValue)).ToString())
        txtPassPhrase.Text = ""
    End Sub
End Class